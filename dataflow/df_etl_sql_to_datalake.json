{
	"name": "df_etl_sql_to_datalake",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "src_table_book",
						"type": "DatasetReference"
					},
					"name": "BookTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_keyword",
						"type": "DatasetReference"
					},
					"name": "KeywordTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_employee",
						"type": "DatasetReference"
					},
					"name": "CustomerTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_keyword_books",
						"type": "DatasetReference"
					},
					"name": "BookKeywordsTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_copy",
						"type": "DatasetReference"
					},
					"name": "CopiesTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_loan",
						"type": "DatasetReference"
					},
					"name": "LoanTable"
				},
				{
					"dataset": {
						"referenceName": "src_table_review",
						"type": "DatasetReference"
					},
					"name": "ReviewTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Book_DIM",
						"type": "DatasetReference"
					},
					"name": "BookDIM"
				},
				{
					"dataset": {
						"referenceName": "Keyword_DIM",
						"type": "DatasetReference"
					},
					"name": "KeywordDIM"
				},
				{
					"dataset": {
						"referenceName": "User_DIM",
						"type": "DatasetReference"
					},
					"name": "UserDIM"
				},
				{
					"dataset": {
						"referenceName": "Book_Keyword_FACT",
						"type": "DatasetReference"
					},
					"name": "BookKeywordFACT"
				},
				{
					"dataset": {
						"referenceName": "Loan_FACT",
						"type": "DatasetReference"
					},
					"name": "LoanFACT"
				},
				{
					"dataset": {
						"referenceName": "Review_FACT",
						"type": "DatasetReference"
					},
					"name": "ReviewFACT"
				}
			],
			"transformations": [
				{
					"name": "trimBook"
				},
				{
					"name": "trimKeyword"
				},
				{
					"name": "trimUser"
				},
				{
					"name": "joinBooksAndCopies"
				},
				{
					"name": "JoinBookAndBooksKeywords"
				},
				{
					"name": "trimBooksAndKeywords"
				},
				{
					"name": "addCombinedColumnBookKeyword"
				},
				{
					"name": "aggregateCountToFilterDuplicates"
				},
				{
					"name": "dropDuplicatesBookKeywords"
				},
				{
					"name": "joinBooksAndLoans"
				},
				{
					"name": "trimLoans2"
				},
				{
					"name": "surrogateKeyBook"
				},
				{
					"name": "surrogateKeyLoan"
				},
				{
					"name": "joinLoansOnUserKey"
				},
				{
					"name": "surrogateKeyUser"
				},
				{
					"name": "surrogateKeyKeyword"
				},
				{
					"name": "JoinKeywordAndBooksKeywords"
				},
				{
					"name": "surrogateKeyReview"
				},
				{
					"name": "trimLoans"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as long,",
				"          active as boolean,",
				"          available as boolean,",
				"          isbn as string,",
				"          photo as string,",
				"          stock as integer,",
				"          title as string,",
				"          writer as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> BookTable",
				"source(output(",
				"          id as long,",
				"          keyword as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> KeywordTable",
				"source(output(",
				"          id as long,",
				"          active as boolean,",
				"          admin as boolean,",
				"          email as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          password as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerTable",
				"source(output(",
				"          keywords_id as long,",
				"          books_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> BookKeywordsTable",
				"source(output(",
				"          id as long,",
				"          active as boolean,",
				"          book_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CopiesTable",
				"source(output(",
				"          id as long,",
				"          loan_date as date,",
				"          return_date as date,",
				"          copy_id as long,",
				"          employee_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LoanTable",
				"source(output(",
				"          id as long,",
				"          rating as integer,",
				"          book_id as long,",
				"          employee_id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReviewTable",
				"surrogateKeyBook select(mapColumn(",
				"          book_key,",
				"          book_id = id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimBook",
				"surrogateKeyKeyword select(mapColumn(",
				"          keyword_key,",
				"          keyword_id = id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimKeyword",
				"surrogateKeyUser select(mapColumn(",
				"          user_key,",
				"          user_id = id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimUser",
				"surrogateKeyBook, CopiesTable join(BookTable@id == book_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBooksAndCopies",
				"surrogateKeyBook, BookKeywordsTable join(id == books_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBookAndBooksKeywords",
				"JoinKeywordAndBooksKeywords select(mapColumn(",
				"          book_key,",
				"          keyword_key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimBooksAndKeywords",
				"trimBooksAndKeywords derive(book_keywords_id = concatWS('-', toString(book_key), toString(keyword_key))) ~> addCombinedColumnBookKeyword",
				"addCombinedColumnBookKeyword aggregate(groupBy(book_key,",
				"          keyword_key),",
				"     countCombined = count(book_keywords_id)) ~> aggregateCountToFilterDuplicates",
				"aggregateCountToFilterDuplicates select(mapColumn(",
				"          book_key,",
				"          keyword_key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dropDuplicatesBookKeywords",
				"joinBooksAndCopies, LoanTable join(CopiesTable@id == copy_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBooksAndLoans",
				"joinLoansOnUserKey select(mapColumn(",
				"          loan_key,",
				"          loan_id = id,",
				"          loan_date,",
				"          return_date,",
				"          book_key,",
				"          user_key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimLoans2",
				"BookTable keyGenerate(output(book_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyBook",
				"trimLoans keyGenerate(output(loan_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyLoan",
				"surrogateKeyLoan, trimUser join(employee_id == user_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLoansOnUserKey",
				"CustomerTable keyGenerate(output(user_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyUser",
				"KeywordTable keyGenerate(output(keyword_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyKeyword",
				"JoinBookAndBooksKeywords, trimKeyword join(keywords_id == keyword_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinKeywordAndBooksKeywords",
				"ReviewTable keyGenerate(output(review_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyReview",
				"joinBooksAndLoans select(mapColumn(",
				"          id = LoanTable@id,",
				"          loan_date,",
				"          return_date,",
				"          book_key,",
				"          employee_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trimLoans",
				"trimBook sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BookDIM",
				"trimKeyword sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> KeywordDIM",
				"trimUser sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UserDIM",
				"dropDuplicatesBookKeywords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BookKeywordFACT",
				"trimLoans2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LoanFACT",
				"surrogateKeyReview sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ReviewFACT"
			]
		}
	}
}